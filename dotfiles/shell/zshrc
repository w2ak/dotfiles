# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="bureau"
# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git gitfast git-extras sudo catimg common-aliases lol alias-tips colored-man-pages)
# User configuration

export PATH="$HOME/bin:$HOME/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:$HOME/bin/scripts"
# export MANPATH="/usr/local/man:$MANPATH"
if which tmux &>/dev/null; then
  plugins+=(tmux)
fi
if which pass &>/dev/null; then
  plugins+=(pass)
fi
if which virtualenv &>/dev/null; then
  export WORKON_HOME="$HOME/.virtualenvs"
  export VIRTUALENVWRAPPER_PYTHON="$(which python3)"
  plugins+=(virtualenv virtualenvwrapper)
fi


if [ -f $HOME/.zsh_perso ]; then source $HOME/.zsh_perso; fi

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi
export EDITOR='/usr/bin/vim'

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

sshi () { eval $(ssh-agent) ; ssh-add ; }

ssht () { for host in $(cat "$@") ; do echo $host ; ssh -t $host './script.sh' ; done; }

sshtb () { for host in $(cat "$@") ; do echo $host ; ssh -t $host './scriptbis.sh' ; done; }

# alias cat=lolcat

tempdir () {
    d=`mktemp -d`;
    chmod -R 700 $d;
    sh -c "rm -rf $d/*";
    cd $d;
}

alias rm=rm

alias manage="python3 -m manage"

#autoload bashcompinit
#bashcompinit
#autoload compinit
#compinit

# FIX GPG PROBLEMS WITH SUDO
export GPG_TTY=$(tty)
function impersonate () {
  set -v
  user=$1; shift
  if ! getent passwd ${user} &>/dev/null; then
    echo >&2 "${user}: No such user."
    return 1
  fi
  if [ -n "${DISPLAY}" -a $({ xhost +"si:localuser:${user}" 2>&1 >/dev/null; } | wc -l) -gt 0 ]; then
    echo >&2 "Error when opening xhost for user ${user}."
    return 1
  fi
  echo >&2 "Giving tty ownership to ${user}"
  sudo chown ${user} ${GPG_TTY}
  echo >&2 "Logging in as ${user}"
  DISPLAY= sudo -iu ${user}
  if [ -n "${DISPLAY}" -a $({ xhost -"si:localuser:${user}" 2>&1 >/dev/null; } | wc -l) -gt 0 ]; then
    echo >&2 "Error when closing xhost for user ${user}."
    return 1
  fi
  echo >&2 "Taking back tty ownership"
  sudo chown $(whoami) ${GPG_TTY}
  set +v
}

if [ -f $HOME/.zsh_override ]; then source $HOME/.zsh_override; fi
